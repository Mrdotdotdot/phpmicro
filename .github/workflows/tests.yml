name: tests
on: [push]
jobs:
  wintests:
    name: Windows tests for PHP ${{ fromJSON(matrix.phpver).l }}
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: ["windows-latest"]
        phpver: ['{s:"74", l:"7.4.15"}', '{s:"80", l:"8.0.2"}']
      max-parallel: 1
    steps:
      - name: Checkout PHP
        uses: actions/checkout@v2
        with:
          repository: php/php-src
          path: php-src
          ref: php-${{ fromJSON(matrix.phpver).l }}

      - name: Checkout micro
        uses: actions/checkout@v2
        with:
          path: php-src/sapi/micro

      - name: Checkout php-sdk-binary-tools
        uses: actions/checkout@v2
        with:
          repository: Microsoft/php-sdk-binary-tools
          path: php-sdk-binary-tools
          ref: master
      
      - name: Apply patches
        shell: cmd
        working-directory: php-src
        run: |
          patch -p1 < sapi/micro/patches/cli_checks.patch && ^
          patch -p1 < sapi/micro/patches/vcruntime140_${{ fromJSON(matrix.phpver).s }}.patch && ^
          patch -p1 < sapi/micro/patches/win32_${{ fromJSON(matrix.phpver).s }}.patch && ^
          patch -p1 < sapi/micro/patches/zend_stream.patch
      
      - name: Build PHPmicro
        shell: cmd /c ..\php-sdk-binary-tools\phpsdk-vs16-x64.bat -t {0}
        working-directory: php-src
        run: |
          buildconf && ^
          configure ^
            --disable-all ^
            --enable-micro ^
            --disable-zts ^
            --enable-ctype ^
            --enable-filter ^
            --enable-mbstring ^
            --enable-session ^
            --enable-tokenizer ^
            --enable-phar && ^
          nmake sfx
          REM TODO:
          REM --with-ffi --enable-zlib --with-curl --enable-zip

      - name: Test PHPmicro
        shell: cmd /c ..\php-sdk-binary-tools\phpsdk-vs16-x64.bat -t {0}
        working-directory: php-src
        run: |
          nmake sfx_test
  linuxtests:
    name: Linux tests for PHP ${{ fromJSON(matrix.phpver).l }}
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        phpver: ['{s:"74", l:"7.4.14"}', '{s:"80", l:"8.0.1"}']
      max-parallel: 1
    steps:
      - name: Checkout PHP
        uses: actions/checkout@v2
        with:
          repository: php/php-src
          path: php-src
          ref: php-${{ fromJSON(matrix.phpver).l }}

      - name: Checkout micro
        uses: actions/checkout@v2
        with:
          path: php-src/sapi/micro

      - name: Apply patches
        working-directory: php-src
        run: |
          patch -p1 < sapi/micro/patches/cli_checks.patch &&
          patch -p1 < sapi/micro/patches/disable_huge_page.patch

      - name: Install deps
        run: |
          sudo apt-get update &&
          sudo apt-get install -yyq re2c

      - name: Build PHPmicro
        working-directory: php-src
        run: |
          ./buildconf --force &&
          ./configure \
            --disable-all \
            --disable-cgi \
            --disable-cli \
            --enable-micro \
            --disable-phpdbg \
            --without-pear \
            --disable-shared \
            --enable-static \
            --disable-dom \
            --disable-simplexml \
            --disable-xml \
            --disable-xmlreader \
            --disable-xmlwriter \
            --enable-ctype \
            --enable-filter \
            --enable-mbstring \
            --enable-session \
            --enable-sockets \
            --enable-tokenizer \
            --enable-phar \
            --enable-posix \
            --enable-pcntl \
            --disable-mbregex &&
          make -j `nproc` \
            EXTRA_CFLAGS='-Os' \
            EXTRA_LDFLAGS_PROGRAM=-lpthread &&
          elfedit --output-osabi linux sapi/micro/micro.sfx
        # TODO:
        # --enable-zlib --with-curl --enable-zip onig

      - name: Test PHPmicro
        working-directory: php-src
        run: |
          make micro_test TESTS="sapi/micro/tests"