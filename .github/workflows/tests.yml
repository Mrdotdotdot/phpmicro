
name: tests

on: [push]

jobs:
  fetchversion:
    name: Fetch latest PHP version
    runs-on: "ubuntu-latest"
    outputs:
      info: ${{ steps.fetch.outputs.info }}
    steps:
      - name: Fetch version info
        id: fetch
        run: |
          printf "::set-output name=info::"
          jq -rcs '
          # default targets
          [{
            "name": "master",
            "rev":"master",
            "patch":"80",
          }] +
          [.[] | {
            # ver is like 8.0.0
            "ver" : . | keys | first
          } | {
            "name": .ver,
            "rev": ("php-"+.ver),
            "patch": {
              # mapping maj.min to patches used
              "8.1": "81",
              "8.0": "80",
            }[.ver | sub("(?<v>\\d+\\.\\d+)\\..+"; .v)],
          }]' \
            <(curl -sfSL 'https://www.php.net/releases/?json&max=1&version=8.0') \
            <(curl -sfSL 'https://www.php.net/releases/?json&max=1&version=8.1')
  wintests:
    name: Windows tests for PHP ${{ matrix.name }}
    runs-on: "windows-latest"
    needs: 
      - fetchversion
    strategy:
      matrix:
        include: ${{ fromJSON(needs.fetchversion.outputs.info) }}
      max-parallel: 3
      fail-fast: false
    steps:
      - name: Checkout PHP
        uses: actions/checkout@v2
        with:
          repository: php/php-src
          path: php-src
          ref: ${{ matrix.rev }}

      - name: Checkout micro
        uses: actions/checkout@v2
        with:
          path: php-src/sapi/micro

      - name: Checkout php-sdk-binary-tools
        uses: actions/checkout@v2
        with:
          repository: php/php-sdk-binary-tools
          path: php-sdk-binary-tools
          ref: master

      - name: Apply patches
        shell: cmd
        working-directory: php-src
        run: |
          patch -p1 < sapi/micro/patches/cli_checks_${{ matrix.patch }}.patch && ^
          patch -p1 < sapi/micro/patches/vcruntime140_80.patch && ^
          patch -p1 < sapi/micro/patches/win32_80.patch && ^
          patch -p1 < sapi/micro/patches/zend_stream.patch

      - name: Build PHPmicro
        shell: cmd /c ..\php-sdk-binary-tools\phpsdk-vs17-x64.bat -t {0}
        working-directory: php-src
        run: |
          buildconf && ^
          configure ^
            --disable-all ^
            --enable-micro ^
            --disable-zts ^
            --enable-ctype ^
            --enable-filter ^
            --enable-mbstring ^
            --enable-session ^
            --enable-tokenizer ^
            --enable-phar && ^
          nmake micro
          REM TODO:
          REM --with-ffi --enable-zlib --with-curl --enable-zip

      - name: Upload built micro as artifact
        uses: actions/upload-artifact@v2
        with:
          name: micro_windows_${{ matrix.name }}
          path: php-src/x64/Release/micro.sfx
          if-no-files-found: error

      - name: Test PHPmicro
        shell: cmd /c ..\php-sdk-binary-tools\phpsdk-vs17-x64.bat -t {0}
        working-directory: php-src
        run: |
          nmake micro_test TESTS="--color sapi/micro/tests"
  linuxtests:
    name: Linux tests for PHP ${{ matrix.name }}
    runs-on: "ubuntu-latest"
    needs: 
      - fetchversion
    strategy:
      matrix:
        include: ${{ fromJSON(needs.fetchversion.outputs.info) }}
      max-parallel: 3
      fail-fast: false
    steps:
      - name: Checkout PHP
        uses: actions/checkout@v2
        with:
          repository: php/php-src
          path: php-src
          ref: ${{ matrix.rev }}

      - name: Checkout micro
        uses: actions/checkout@v2
        with:
          path: php-src/sapi/micro

      - name: Apply patches
        working-directory: php-src
        run: |
          patch -p1 < sapi/micro/patches/cli_checks_${{ matrix.patch }}.patch &&
          patch -p1 < sapi/micro/patches/disable_huge_page.patch

      - name: Install deps
        run: |
          sudo apt-get update &&
          sudo apt-get install -yyq re2c

      - name: Build PHPmicro
        working-directory: php-src
        run: |
          ./buildconf --force &&
          ./configure \
            --disable-all \
            --disable-cgi \
            --disable-cli \
            --enable-micro \
            --disable-phpdbg \
            --without-pear \
            --disable-shared \
            --enable-static \
            --disable-dom \
            --disable-simplexml \
            --disable-xml \
            --disable-xmlreader \
            --disable-xmlwriter \
            --enable-ctype \
            --enable-filter \
            --enable-mbstring \
            --enable-session \
            --enable-sockets \
            --enable-tokenizer \
            --enable-phar \
            --enable-posix \
            --enable-pcntl \
            --disable-mbregex &&
          make -j `nproc` \
            EXTRA_CFLAGS='-Os' \
            EXTRA_LDFLAGS_PROGRAM=-lpthread &&
          elfedit --output-osabi linux sapi/micro/micro.sfx
        # TODO:
        # --enable-zlib --with-curl --enable-zip onig

      - name: Upload built micro as artifact
        uses: actions/upload-artifact@v2
        with:
          name: micro_linux_${{ matrix.name }}
          path: php-src/sapi/micro/micro.sfx
          if-no-files-found: error

      - name: Test PHPmicro
        working-directory: php-src
        run: |
          make micro_test TESTS="--color sapi/micro/tests"
