--- php-8.0.0/ext/phar/phar.c	2020-11-25 01:04:03.000000000 +0800
+++ php-8.0.0-micro/ext/phar/phar.c	2020-11-29 16:10:34.419122355 +0800
@@ -1623,6 +1623,13 @@ static inline char *phar_strnstr(const c
 }
 /* }}} */
 
+#include "sapi/micro/php_micro_fileinfo.h"
+#include "sapi/micro/php_micro_helper.h"
+#ifdef PHP_MICRO_BUILD_SFX
+#undef php_stream_rewind
+#define php_stream_rewind micro_php_stream_rewind
+#endif // PHP_MICRO_BUILD_SFX
+
 /**
  * Scan an open fp for the required __HALT_COMPILER(); ?> token and verify
  * that the manifest is proper, then pass it to phar_parse_pharfile().  SUCCESS
@@ -1653,6 +1660,11 @@ static int phar_open_from_fp(php_stream*
 
 	buffer[sizeof(buffer)-1] = '\0';
 	memset(buffer, 32, sizeof(token));
+#ifdef PHP_MICRO_BUILD_SFX
+	if(is_stream_self(fp)){
+		halt_offset = micro_get_sfx_filesize();
+	}else
+#endif
 	halt_offset = 0;
 
 	/* Maybe it's better to compile the file instead of just searching,  */
@@ -1780,6 +1792,7 @@ static int phar_open_from_fp(php_stream*
 
 		if (got > 0 && (pos = phar_strnstr(buffer, got + sizeof(token), token, sizeof(token)-1)) != NULL) {
 			halt_offset += (pos - buffer); /* no -tokenlen+tokenlen here */
+			dbgprintf(L"thinking offset is %d\n", halt_offset);
 			return phar_parse_pharfile(fp, fname, fname_len, alias, alias_len, halt_offset, pphar, compression, error);
 		}
 
@@ -1791,6 +1804,11 @@ static int phar_open_from_fp(php_stream*
 }
 /* }}} */
 
+#ifdef PHP_MICRO_BUILD_SFX
+#undef php_stream_rewind
+#define php_stream_rewind(stream)	_php_stream_seek((stream), 0L, SEEK_SET)
+#endif
+
 /*
  * given the location of the file extension and the start of the file path,
  * determine the end of the portion of the path (i.e. /path/to/file.ext/blah
--- php-8.0.0/ext/phar/util.c	2020-11-25 01:04:03.000000000 +0800
+++ php-8.0.0-micro/ext/phar/util.c	2020-11-29 16:10:25.102434781 +0800
@@ -1469,8 +1469,23 @@ static int phar_call_openssl_signverify(
 /* }}} */
 #endif /* #ifndef PHAR_HAVE_OPENSSL */
 
-int phar_verify_signature(php_stream *fp, size_t end_of_phar, uint32_t sig_type, char *sig, size_t sig_len, char *fname, char **signature, size_t *signature_len, char **error) /* {{{ */
+#include "sapi/micro/php_micro_fileinfo.h"
+#include "sapi/micro/php_micro_helper.h"
+#ifdef PHP_MICRO_BUILD_SFX
+#undef php_stream_rewind
+#define php_stream_rewind micro_php_stream_rewind
+#endif // PHP_MICRO_BUILD_SFX
+
+int phar_verify_signature(php_stream *fp, size_t _end_of_phar, uint32_t sig_type, char *sig, size_t sig_len, char *fname, char **signature, size_t *signature_len, char **error) /* {{{ */
 {
+	size_t end_of_phar;
+#ifdef PHP_MICRO_BUILD_SFX
+	if(is_stream_self(fp)){
+		end_of_phar = _end_of_phar - micro_get_sfx_filesize();
+	}
+	else
+#endif
+	end_of_phar = _end_of_phar;
 	size_t read_size, len;
 	zend_off_t read_len;
 	unsigned char buf[1024];
@@ -1766,6 +1781,11 @@ int phar_verify_signature(php_stream *fp
 }
 /* }}} */
 
+#ifdef PHP_MICRO_BUILD_SFX
+#undef php_stream_rewind
+#define php_stream_rewind(stream)	_php_stream_seek((stream), 0L, SEEK_SET)
+#endif
+
 int phar_create_signature(phar_archive_data *phar, php_stream *fp, char **signature, size_t *signature_length, char **error) /* {{{ */
 {
 	unsigned char buf[1024];
